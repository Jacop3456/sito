const express = require('express');
const http = require('http');
const mongoose = require('mongoose');
const cors = require('cors');
const socketio = require('socket.io');
const jwt = require('jsonwebtoken');
const authRoutes = require('./routes/auth');
const messageRoutes = require('./routes/messages');

const app = express();
const server = http.createServer(app);
const io = socketio(server, {
  cors: {
    origin: '*'
  }
});

mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log('MongoDB connesso'))
  .catch(err => console.log(err));

app.use(cors());
app.use(express.json());
app.use('/api/auth', authRoutes);
app.use('/api/messages', messageRoutes);

io.on('connection', (socket) => {
  console.log('Utente connesso');

  socket.on('joinRoom', (room) => {
    socket.join(room);
  });

  socket.on('sendMessage', ({ room, message }) => {
    io.to(room).emit('receiveMessage', message);
  });
});

server.listen(5000, () => console.log('Server avviato su porta 5000'));

const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const User = require('../models/User');

const router = express.Router();

router.post('/register', async (req, res) => {
  const { username, password } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);
  const newUser = new User({ username, password: hashedPassword });
  await newUser.save();
  res.status(201).send('Utente registrato');
});

router.post('/login', async (req, res) => {
  const { username, password } = req.body;
  const user = await User.findOne({ username });

  if (!user || !(await bcrypt.compare(password, user.password))) {
    return res.status(401).send('Credenziali non valide');
  }

  const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
  res.json({ token });
});

module.exports = router;
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  username: { type: String, required: true },
  password: { type: String, required: true }
});

module.exports = mongoose.model('User', userSchema);
import React, { useState, useEffect } from 'react';
import io from 'socket.io-client';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';

const socket = io('http://localhost:5000'); // URL del server backend

const App = () => {
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState([]);
  const [room, setRoom] = useState('general');

  useEffect(() => {
    socket.emit('joinRoom', room);
    socket.on('receiveMessage', (newMessage) => {
      setMessages((prevMessages) => [...prevMessages, newMessage]);
    });

    return () => {
      socket.disconnect();
    };
  }, [room]);

  const sendMessage = () => {
    socket.emit('sendMessage', { room, message });
    setMessage('');
  };

  return (
    <div>
      <h1>Welcome to the Discord Clone</h1>
      <div>
        <select onChange={(e) => setRoom(e.target.value)}>
          <option value="general">General</option>
          <option value="tech">Tech</option>
          <option value="gaming">Gaming</option>
        </select>
      </div>
      <div>
        {messages.map((msg, index) => (
          <p key={index}>{msg}</p>
        ))}
      </div>
      <input
        type="text"
        value={message}
        onChange={(e) => setMessage(e.target.value)}
        placeholder="Type a message"
      />
      <button onClick={sendMessage}>Send</button>
    </div>
  );
};

export default App;
{
  "name": "discord-clone-client",
  "version": "1.0.0",
  "dependencies": {
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "react-router-dom": "^5.1.0",
    "socket.io-client": "^4.1.3"
  }
}
services:
  - type: web
    name: discord-backend
    env: node
    plan: free
    buildCommand: "cd server && npm install"
    startCommand: "cd server && npm start"
    envVars:
      - key: MONGO_URI
        value: "mongodb+srv://<TUO_UTENTE>:<TUA_PASSWORD>@cluster.mongodb.net/db"
      - key: JWT_SECRET
        value: "supersegreto"
      
  - type: web
    name: discord-frontend
    env: static
    buildCommand: "cd client && npm install && npm run build"
    staticPublishPath: client/dist
    routes:
      - type: rewrite
        source: /** 
        destination: /index.html
